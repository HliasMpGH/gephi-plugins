/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateTopComponent637.java to edit this template
 */
package net.clementlevallois.lexicalexplorer;

import java.io.IOException;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import org.gephi.graph.api.GraphModel;
import org.gephi.utils.longtask.api.LongTaskExecutor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.clementlevallois.lexicalexplorer//Lexplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LexplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "layoutmode", openAtStartup = true)
@ActionID(category = "Window", id = "net.clementlevallois.lexicalexplorer.LexplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#expression.gephi_menu_item.title",
        preferredID = "LexplorerTopComponent"
)

public final class LexplorerTopComponent extends TopComponent {

    private GraphModel graphModel;

    private Boolean running = false;

    private static final long serialVersionUID = 305983503930l;

    private static final ResourceBundle bundle = NbBundle.getBundle(LexplorerTopComponent.class);

    private final LongTaskExecutor executor;

    private TopWordsFinderRunnable runnable;

    private SwingWorker worker;

    public LexplorerTopComponent() throws IOException {
        initComponents();
        setName(bundle.getString("expression.top_panel.title"));
        setToolTipText(bundle.getString("expression.top_panel.tooltip"));

        // initializing the graph
        graphModel = GraphOperations.graphInitFromCurrentlyOpendProject();
        DefaultListModel<String> listModelOfNodeAttributes;

        // loading the names of nodes attributes
        if (graphModel == null) {
            listModelOfNodeAttributes = new DefaultListModel();
            loggingjTextField.setText("open a network to use this plugin");
        } else {
            listModelOfNodeAttributes = GraphOperations.returnTextualNodeAttributesAsListOfNames(graphModel);
        }
        jListOfNodeAttributes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setModel(listModelOfNodeAttributes);

        // setting the default value of the top terms to display
        jSpinnerNumberTopTerms.setValue(10);

        executor = new LongTaskExecutor(true, "Lexical Explorer Plugin");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        runButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        parametersPanel = new javax.swing.JPanel();
        attributeFrame = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListOfNodeAttributes = new javax.swing.JList<>();
        javax.swing.JButton jButtonRefreshNodeAttributes = new javax.swing.JButton();
        numberTopWordsFrame = new javax.swing.JInternalFrame();
        jSpinnerNumberTopTerms = new javax.swing.JSpinner();
        loggingjTextField = new javax.swing.JTextField();
        wordCloudPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        placeHolderForTopTerms = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.runButton.text")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        attributeFrame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attributeFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        attributeFrame.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.attributeFrame.title")); // NOI18N
        attributeFrame.setVisible(true);

        jListOfNodeAttributes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListOfNodeAttributesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListOfNodeAttributes);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRefreshNodeAttributes, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jButtonRefreshNodeAttributes.text")); // NOI18N
        jButtonRefreshNodeAttributes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshNodeAttributesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attributeFrameLayout = new javax.swing.GroupLayout(attributeFrame.getContentPane());
        attributeFrame.getContentPane().setLayout(attributeFrameLayout);
        attributeFrameLayout.setHorizontalGroup(
            attributeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributeFrameLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(attributeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(attributeFrameLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jButtonRefreshNodeAttributes)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        attributeFrameLayout.setVerticalGroup(
            attributeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonRefreshNodeAttributes)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        numberTopWordsFrame.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.numberTopWordsFrame.title")); // NOI18N
        numberTopWordsFrame.setVisible(true);

        javax.swing.GroupLayout numberTopWordsFrameLayout = new javax.swing.GroupLayout(numberTopWordsFrame.getContentPane());
        numberTopWordsFrame.getContentPane().setLayout(numberTopWordsFrameLayout);
        numberTopWordsFrameLayout.setHorizontalGroup(
            numberTopWordsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberTopWordsFrameLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jSpinnerNumberTopTerms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        numberTopWordsFrameLayout.setVerticalGroup(
            numberTopWordsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberTopWordsFrameLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jSpinnerNumberTopTerms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        loggingjTextField.setEditable(false);
        loggingjTextField.setBackground(new java.awt.Color(102, 102, 102));
        loggingjTextField.setForeground(new java.awt.Color(51, 255, 51));
        loggingjTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        loggingjTextField.setText(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.loggingjTextField.text")); // NOI18N

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parametersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(attributeFrame))
                    .addComponent(numberTopWordsFrame, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(parametersPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(loggingjTextField)))
                .addContainerGap())
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attributeFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberTopWordsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loggingjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.parametersPanel.TabConstraints.tabTitle"), parametersPanel); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(placeHolderForTopTerms, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.placeHolderForTopTerms.text")); // NOI18N
        jScrollPane2.setViewportView(placeHolderForTopTerms);

        javax.swing.GroupLayout wordCloudPanelLayout = new javax.swing.GroupLayout(wordCloudPanel);
        wordCloudPanel.setLayout(wordCloudPanelLayout);
        wordCloudPanelLayout.setHorizontalGroup(
            wordCloudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wordCloudPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addContainerGap())
        );
        wordCloudPanelLayout.setVerticalGroup(
            wordCloudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wordCloudPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.wordCloudPanel.TabConstraints.tabTitle"), wordCloudPanel); // NOI18N

        jPanel1.add(tabbedPane);
        tabbedPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.tabbedPane.AccessibleContext.accessibleName")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(runButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        // Boolean (true / false) variable checking if the plugin is running or not
        running = !running;

        if (running) {
            runButton.setText("cancel");
            Integer topTermsToDisplay = (Integer) jSpinnerNumberTopTerms.getValue();
            Integer pauseBetweenComputations = 100;
            runnable = new TopWordsFinderRunnable(topTermsToDisplay, pauseBetweenComputations);
            worker = new UIupdater(10);
            worker.execute();
            executor.execute(runnable, runnable);
            loggingjTextField.setText("switch to the word cloud tab, and mouse over the network");
        } else {
            runnable.cancel();
            runButton.setText("run");
            executor.cancel();
            worker.cancel(true);
            loggingjTextField.setText("word cloud analysis stopped");
        }

        if (running) {
            TopTermExtractor topTermExtractor = new TopTermExtractor();
            String selectedColumnId = jListOfNodeAttributes.getSelectedValue();
            if (selectedColumnId == null || selectedColumnId.isEmpty()) {
                loggingjTextField.setText("No node attribute selected. Please choose one in the list");
                placeHolderForTopTerms.setText("");
                return;
            }
            loggingjTextField.setText("Analyzing the text, please wait...");
            topTermExtractor.tokenizeSelectedTextualAttributeForTheEntireGraph(graphModel, selectedColumnId, "en");
            loggingjTextField.setText("Finished. Ready to run.");
    }//GEN-LAST:event_runButtonActionPerformed
    }
    private void jButtonRefreshNodeAttributesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshNodeAttributesActionPerformed
        // loading the names of nodes attributes
        DefaultListModel<String> listModelOfNodeAttributes;
        if (graphModel == null) {
            graphModel = GraphOperations.graphInitFromCurrentlyOpendProject();
        }
        if (graphModel == null) {
            listModelOfNodeAttributes = new DefaultListModel();
            loggingjTextField.setText("No network found. Open a network to use this plugin");
        } else {
            listModelOfNodeAttributes = GraphOperations.returnTextualNodeAttributesAsListOfNames(graphModel);
            loggingjTextField.setText("Select a node attribute in the list.");
        }
        jListOfNodeAttributes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setModel(listModelOfNodeAttributes);
    }//GEN-LAST:event_jButtonRefreshNodeAttributesActionPerformed

    private void jListOfNodeAttributesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListOfNodeAttributesValueChanged
        loggingjTextField.setText("the word cloud will be created from this node attribute: " + jListOfNodeAttributes.getSelectedValue());

    }//GEN-LAST:event_jListOfNodeAttributesValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame attributeFrame;
    private javax.swing.JList<String> jListOfNodeAttributes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerNumberTopTerms;
    private javax.swing.JTextField loggingjTextField;
    private javax.swing.JInternalFrame numberTopWordsFrame;
    private javax.swing.JPanel parametersPanel;
    public static javax.swing.JLabel placeHolderForTopTerms;
    private javax.swing.JButton runButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel wordCloudPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private class UIupdater extends SwingWorker<String, String> {

        long pauseInMillis;

        public UIupdater(long pauseInMillis) {
            this.pauseInMillis = pauseInMillis;
        }

        @Override
        public String doInBackground() throws InterruptedException {
            while (!this.isCancelled()) {
                String intermediary = runnable.getIntermediary();
                if (intermediary != null) {
                    placeHolderForTopTerms.setText(intermediary);
                }
                Thread.sleep(pauseInMillis);
            }
            return "";
        }
    }
}
