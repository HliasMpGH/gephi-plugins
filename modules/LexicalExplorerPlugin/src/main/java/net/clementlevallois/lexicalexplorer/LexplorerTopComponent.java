/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateTopComponent637.java to edit this template
 */
package net.clementlevallois.lexicalexplorer;

import java.beans.PropertyVetoException;
import java.io.IOException;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import org.gephi.graph.api.GraphModel;
import org.gephi.utils.longtask.api.LongTaskExecutor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.clementlevallois.lexicalexplorer//Lexplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LexplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "filtersmode", openAtStartup = true)
@ActionID(category = "Window", id = "net.clementlevallois.lexicalexplorer.LexplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#expression.gephi_menu_item.title",
        preferredID = "LexplorerTopComponent"
)

public final class LexplorerTopComponent extends TopComponent {

    private GraphModel graphModel;

    private Boolean running = false;

    private static final long serialVersionUID = 305983503930l;

    private static final ResourceBundle bundle = NbBundle.getBundle(LexplorerTopComponent.class);

    private final LongTaskExecutor executor;

    private TopWordsFinderRunnable topWordsRetrieverAsRunnable;
    private InitialWordProcessingRunnable initialWordProcessingRunnable;

    private SwingWorker uiUpdaterAsSwingWorker;

    private LogAreaUpdater logAreaUpdater;

    public LexplorerTopComponent() throws IOException, PropertyVetoException {
        initComponents();
        setName(bundle.getString("expression.top_panel.title"));
        setToolTipText(bundle.getString("expression.top_panel.tooltip"));
        
        // initializing the graph
        graphModel = GraphOperations.graphInitFromCurrentlyOpenedProject();
        DefaultListModel<String> listModelOfNodeAttributes;

        // loading the names of nodes attributes
        if (graphModel == null) {
            listModelOfNodeAttributes = new DefaultListModel();
            loggingjTextField.setText("<html>"+ bundle.getString("expression.warning.open_network") + "</html>");
        } else {
            listModelOfNodeAttributes = GraphOperations.returnTextualNodeAttributesAsListOfNames(graphModel);
        }
        jListOfNodeAttributes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setModel(listModelOfNodeAttributes);

        // setting the default values of the top terms to display
        // in the constructor: spinnerMode: value, min, max, step
        SpinnerModel spinnerModel = new SpinnerNumberModel(5, 1, 10, 1);
        jSpinnerNumberTopTerms.setModel(spinnerModel);

        executor = new LongTaskExecutor(true, "Lexical Explorer Plugin");
        executor.setLongTaskListener(longTask -> {
            if (longTask instanceof InitialWordProcessingRunnable) {
                logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.finished_ready_to_run"));
                logAreaUpdater.execute();
                Integer nbTopTermsToDisplay = (Integer) jSpinnerNumberTopTerms.getValue();
                Integer pauseBetweenComputations = 100;
                topWordsRetrieverAsRunnable = new TopWordsFinderRunnable(nbTopTermsToDisplay, pauseBetweenComputations);
                uiUpdaterAsSwingWorker = new UIUpdater(10);
                uiUpdaterAsSwingWorker.execute();
                executor.execute(topWordsRetrieverAsRunnable, topWordsRetrieverAsRunnable);
                logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.switch_to_wordcloud_tab_and_select"));
                logAreaUpdater.execute();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        parametersPanel = new javax.swing.JPanel();
        jPanelForTwoParams = new javax.swing.JPanel();
        attributeFrame = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListOfNodeAttributes = new javax.swing.JList<>();
        jPanelRefreshButton = new javax.swing.JPanel();
        javax.swing.JButton jButtonRefreshNodeAttributes = new javax.swing.JButton();
        jPanelNumberTopTerms = new javax.swing.JPanel();
        numberTopWordsFrame = new javax.swing.JInternalFrame();
        jSpinnerNumberTopTerms = new javax.swing.JSpinner();
        loggingjTextField = new javax.swing.JLabel();
        wordCloudPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        placeHolderForTopTerms = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        parametersPanel.setName(""); // NOI18N
        parametersPanel.setLayout(new java.awt.GridLayout(2, 1));

        jPanelForTwoParams.setLayout(new java.awt.GridLayout(2, 1));

        attributeFrame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attributeFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        attributeFrame.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.attributeFrame.title")); // NOI18N
        attributeFrame.setFrameIcon(null);
        attributeFrame.setMaximumSize(new java.awt.Dimension(250, 2147483647));
        attributeFrame.setMinimumSize(new java.awt.Dimension(250, 5));
        attributeFrame.setPreferredSize(new java.awt.Dimension(250, 137));
        attributeFrame.setVisible(true);
        attributeFrame.getContentPane().setLayout(new java.awt.GridLayout(2, 1));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(250, 100));

        jListOfNodeAttributes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setAutoscrolls(false);
        jListOfNodeAttributes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListOfNodeAttributesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListOfNodeAttributes);

        attributeFrame.getContentPane().add(jScrollPane1);

        jPanelRefreshButton.setPreferredSize(new java.awt.Dimension(250, 100));

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRefreshNodeAttributes, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jButtonRefreshNodeAttributes.text")); // NOI18N
        jButtonRefreshNodeAttributes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshNodeAttributesActionPerformed(evt);
            }
        });
        jPanelRefreshButton.add(jButtonRefreshNodeAttributes);

        attributeFrame.getContentPane().add(jPanelRefreshButton);

        jPanelForTwoParams.add(attributeFrame);

        jPanelNumberTopTerms.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelNumberTopTerms.setPreferredSize(new java.awt.Dimension(250, 200));
        jPanelNumberTopTerms.setLayout(new java.awt.BorderLayout());

        numberTopWordsFrame.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.numberTopWordsFrame.title")); // NOI18N
        numberTopWordsFrame.setFrameIcon(null);
        numberTopWordsFrame.setMaximumSize(new java.awt.Dimension(250, 100));
        numberTopWordsFrame.setMinimumSize(new java.awt.Dimension(250, 100));
        numberTopWordsFrame.setPreferredSize(new java.awt.Dimension(250, 100));
        numberTopWordsFrame.setVisible(true);
        numberTopWordsFrame.getContentPane().setLayout(new javax.swing.BoxLayout(numberTopWordsFrame.getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jSpinnerNumberTopTerms.setMaximumSize(new java.awt.Dimension(250, 50));
        jSpinnerNumberTopTerms.setMinimumSize(new java.awt.Dimension(250, 50));
        jSpinnerNumberTopTerms.setPreferredSize(new java.awt.Dimension(250, 50));
        numberTopWordsFrame.getContentPane().add(jSpinnerNumberTopTerms);

        jPanelNumberTopTerms.add(numberTopWordsFrame, java.awt.BorderLayout.CENTER);

        jPanelForTwoParams.add(jPanelNumberTopTerms);

        parametersPanel.add(jPanelForTwoParams);

        loggingjTextField.setBackground(new java.awt.Color(102, 102, 102));
        loggingjTextField.setForeground(new java.awt.Color(102, 255, 0));
        loggingjTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(loggingjTextField, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.loggingjTextField.text")); // NOI18N
        loggingjTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loggingjTextField.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loggingjTextField.setOpaque(true);
        parametersPanel.add(loggingjTextField);

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.TabConstraints.tabTitle"), parametersPanel); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(placeHolderForTopTerms, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.placeHolderForTopTerms.text")); // NOI18N
        jScrollPane2.setViewportView(placeHolderForTopTerms);

        javax.swing.GroupLayout wordCloudPanelLayout = new javax.swing.GroupLayout(wordCloudPanel);
        wordCloudPanel.setLayout(wordCloudPanelLayout);
        wordCloudPanelLayout.setHorizontalGroup(
            wordCloudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wordCloudPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
        wordCloudPanelLayout.setVerticalGroup(
            wordCloudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wordCloudPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addGap(48, 48, 48))
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.wordCloudPanel.TabConstraints.tabTitle"), wordCloudPanel); // NOI18N

        jPanel1.add(tabbedPane, java.awt.BorderLayout.CENTER);
        tabbedPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.tabbedPane.AccessibleContext.accessibleName")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.runButton.text")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jPanel1.add(runButton, java.awt.BorderLayout.SOUTH);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        // Boolean (true / false) variable checking if the plugin is running or not
        running = !running;
        if (running) {
            if (graphModel == null) {
                logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.open_network"));
                logAreaUpdater.execute();
                running = !running;
                return;
            }
            runButton.setText(bundle.getString("expression.cancel"));
            String selectedColumnId = jListOfNodeAttributes.getSelectedValue();
            if (selectedColumnId == null || selectedColumnId.isEmpty()) {
                logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.no_node_attribute_selected"));
                logAreaUpdater.execute();
                placeHolderForTopTerms.setText("");
                running = !running;
                return;
            }
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.analyzing_text_please_wait"));
            logAreaUpdater.execute();
            initialWordProcessingRunnable = new InitialWordProcessingRunnable(graphModel, selectedColumnId, "en");
            executor.execute(initialWordProcessingRunnable, initialWordProcessingRunnable);
        } else {
            if (initialWordProcessingRunnable != null) {
                initialWordProcessingRunnable.cancel();
            }
            if (topWordsRetrieverAsRunnable != null) {
                topWordsRetrieverAsRunnable.cancel();
            }
            runButton.setText(bundle.getString("LexplorerTopComponent.runButton.text"));
            executor.cancel();
            if (uiUpdaterAsSwingWorker != null) {
                uiUpdaterAsSwingWorker.cancel(true);
            }
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.wordcloud_analysis_stopped"));
            logAreaUpdater.execute();
    }//GEN-LAST:event_runButtonActionPerformed
    }
    private void jButtonRefreshNodeAttributesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshNodeAttributesActionPerformed
        // loading the names of nodes attributes inthe currently opened network
        DefaultListModel<String> listModelOfNodeAttributes;

        graphModel = GraphOperations.graphInitFromCurrentlyOpenedProject();
        // if we still don't have a graphModel, it means no network is currently opened
        if (graphModel == null) {
            listModelOfNodeAttributes = new DefaultListModel();
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.open_network"));
            logAreaUpdater.execute();
        } else {
            // we have retrieved the opened network. Let's get the names of the nodes attributes from it
            listModelOfNodeAttributes = GraphOperations.returnTextualNodeAttributesAsListOfNames(graphModel);
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.please_select_attribute"));
            logAreaUpdater.execute();
        }
        jListOfNodeAttributes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setModel(listModelOfNodeAttributes);
    }//GEN-LAST:event_jButtonRefreshNodeAttributesActionPerformed

    private void jListOfNodeAttributesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListOfNodeAttributesValueChanged
        logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.plugin_wil_analyze_this_attribute") + jListOfNodeAttributes.getSelectedValue());
        logAreaUpdater.execute();
    }//GEN-LAST:event_jListOfNodeAttributesValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame attributeFrame;
    private javax.swing.JList<String> jListOfNodeAttributes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelForTwoParams;
    private javax.swing.JPanel jPanelNumberTopTerms;
    private javax.swing.JPanel jPanelRefreshButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerNumberTopTerms;
    private javax.swing.JLabel loggingjTextField;
    private javax.swing.JInternalFrame numberTopWordsFrame;
    private javax.swing.JPanel parametersPanel;
    public static javax.swing.JLabel placeHolderForTopTerms;
    private javax.swing.JButton runButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel wordCloudPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version

    }

    private class UIUpdater extends SwingWorker<String, String> {

        long pauseInMillis;

        public UIUpdater(long pauseInMillis) {
            this.pauseInMillis = pauseInMillis;
        }

        @Override
        public String doInBackground() throws InterruptedException {
            while (!this.isCancelled()) {
                String intermediary = topWordsRetrieverAsRunnable.getIntermediary();
                if (intermediary != null && !intermediary.isBlank()) {
                    placeHolderForTopTerms.setText(intermediary);
                } else {
                    placeHolderForTopTerms.setText(bundle.getString("expression.no_node_selected"));
                }
                Thread.sleep(pauseInMillis);
            }
            return "";
        }
    }

    private class LogAreaUpdater extends SwingWorker<String, String> {

        String messageWithoutHtmlEnclosingTags;

        public LogAreaUpdater(String messageWithoutHtmlEnclosingTags) {
            this.messageWithoutHtmlEnclosingTags = messageWithoutHtmlEnclosingTags;
        }

        @Override
        public String doInBackground() throws InterruptedException {
            loggingjTextField.setText("<html>" + messageWithoutHtmlEnclosingTags + "<html>");
            return "";
        }
    }
}
